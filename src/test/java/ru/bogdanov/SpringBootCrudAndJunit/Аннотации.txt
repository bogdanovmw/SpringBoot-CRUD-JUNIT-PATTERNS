@BeforeEach - Аннотированный метод будет запускаться перед каждым тестовым методом в тестовом классе.
@AfterEach - Аннотированный метод будет запускаться после каждого тестового метода в тестовом классе.
@BeforeAll - Аннотированный метод будет запущен перед всеми тестовыми методами в тестовом классе. Этот метод должен быть статическим.
@AfterAll - Аннотированный метод будет запущен после всех тестовых методов в тестовом классе. Этот метод должен быть статическим.
@Test - Он используется, чтобы пометить метод как тест junit.
@DisplayName - Используется для предоставления любого настраиваемого отображаемого имени для тестового класса или тестового метода
@Disable - Он используется для отключения или игнорирования тестового класса или тестового метода из набора тестов.
@Nested - Используется для создания вложенных тестовых классов
@Tag - Пометьте методы тестирования или классы тестов тегами для обнаружения и фильтрации тестов.
@TestFactory - Отметить метод — это тестовая фабрика для динамических тестов.
@Ignore(“message”) - игнорировать тест

@RunWith - если класс содержит данную аннотацию, JUnit будет запускать тесты в классе, который указан в параметрах этой аннотации, вместо стандартного раннера встроенного в JUnit.
@Suite.SuiteClasses - с помощью данной аннотации, тестовый класс совмещает в себе другие тестовые классы, указанные в параметрах.
@Parameterized.Parameters - статический метод, содержащий данную аннотацию создает и возвращает коллекцию из массивов элементов, которые являются параметрами для тестового метода.
@Category - разновидность раннера, который запускает только те тестовые классы и методы, которые аннотированы @IncludeCategory аннотацией или ее расширениями.

@Rule - с помощью этой аннотации можно создавать специальные объекты, которые используются в тестовых методах. Тестеры могут реиспользовать или расширять эти объекты или создавать свои.
    TemporaryFolder - позволяет создавать файлы или папки, которые удаляются по окончании работы метода. По дефолту не выбрасывается исключений, если ресурс не может быть удален.
    ExternalResource - базовый класс, который устанавливает внешние ресурсы перед тестом, такие как: файлы, сокеты, сервера, соединения с базами данных и другие.
    ErrorCollector - позволяет выполнять тест до конца, собирая всевозможные ошибки, которые встретятся во время его выполнения.
    Verifier - ???.
    TestWatcher - данное правило позволяет выполнять логику на определенных событиях теста (succeeded, failed, skipped, starting, finished), не изменяя сам тест. Например, этот класс может вести кастомные логи каждого пройденного или упавшего теста.
    TestName - позволяет выводить название текущего тестового метода.
    Timeout - устанавливает ограничение по времени выполнения на все методы в тестовом классе.
    ExpectedException - позволяет вставлять в тесты ожидания исключений или сообщений.
    RuleChain - устанавливает порядок правил.
    ExpectedException - позволяет вставлять в тесты ожидания исключений или сообщений.

